service: aws-serverless-lambda-auth-crud

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    JWT_SECRET: ${ssm:/jwt-secret}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"

functions:
  register:
    handler: src/handlers/auth.register
    events:
      - http:
          path: auth/register
          method: post
  login:
    handler: src/handlers/auth.login
    events:
      - http:
          path: auth/login
          method: post
  getAllUsers:
    handler: src/handlers/user.getAllUsers
    events:
      - http:
          path: users
          method: get
          authorizer: src/middleware/auth.authorize
  getUserById:
    handler: src/handlers/user.getUserById
    events:
      - http:
          path: users/{id}
          method: get
          authorizer: src/middleware/auth.authorize
  updateUser:
    handler: src/handlers/user.updateUser
    events:
      - http:
          path: users/{id}
          method: put
          authorizer: src/middleware/auth.authorize
  deleteUser:
    handler: src/handlers/user.deleteUser
    events:
      - http:
          path: users/{id}
          method: delete
          authorizer: src/middleware/auth.authorize

resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}

plugins:
  - serverless-offline